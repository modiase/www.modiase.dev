#!/usr/bin/env -S bash -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ${BLUE}info${NC} | $1"
}

log_success() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ${GREEN}success${NC} | $1"
}

log_error() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ${RED}error${NC} | $1"
}

log_warn() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ${YELLOW}warn${NC} | $1"
}

mkdir -p logs

cleanup() {
    log_info "Shutting down development servers..."

    if [ ! -z "${FRONTEND_PID:-}" ] && kill -0 "$FRONTEND_PID" 2>/dev/null; then
        log_info "Stopping frontend server (PID: $FRONTEND_PID)"
        kill -TERM "$FRONTEND_PID" 2>/dev/null || true
    fi

    if [ ! -z "${BACKEND_PID:-}" ] && kill -0 "$BACKEND_PID" 2>/dev/null; then
        log_info "Stopping backend server (PID: $BACKEND_PID)"
        kill -TERM "$BACKEND_PID" 2>/dev/null || true
    fi

    local count=0
    while [ $count -lt 10 ]; do
        local still_running=false

        if [ ! -z "${FRONTEND_PID:-}" ] && kill -0 "$FRONTEND_PID" 2>/dev/null; then
            still_running=true
        fi

        if [ ! -z "${BACKEND_PID:-}" ] && kill -0 "$BACKEND_PID" 2>/dev/null; then
            still_running=true
        fi

        if [ "$still_running" = false ]; then
            break
        fi

        sleep 0.5
        count=$((count + 1))
    done

    if [ ! -z "${FRONTEND_PID:-}" ] && kill -0 "$FRONTEND_PID" 2>/dev/null; then
        log_warn "Force killing frontend server"
        kill -KILL "$FRONTEND_PID" 2>/dev/null || true
    fi

    if [ ! -z "${BACKEND_PID:-}" ] && kill -0 "$BACKEND_PID" 2>/dev/null; then
        log_warn "Force killing backend server"
        kill -KILL "$BACKEND_PID" 2>/dev/null || true
    fi

    log_success "Development servers stopped"
    exit 0
}

trap cleanup SIGINT SIGTERM EXIT

log_info "Starting development servers..."

log_info "Starting backend server on port 3001..."
(NODE_ENV=development pnpm exec node server/index.ts 2>&1 | while IFS= read -r line; do echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ${PURPLE}backend${NC} | $line"; done | tee logs/backend.log) &
BACKEND_PID=$!

log_info "Waiting for backend server to be ready..."
while true; do
    if ! kill -0 "$BACKEND_PID" 2>/dev/null; then
        log_error "Backend server process died"
        if [ -f logs/backend.log ]; then
            cat logs/backend.log
        fi
        exit 1
    fi

    if curl -s http://localhost:3001/api/posts > /dev/null 2>&1; then
        log_success "Backend server is ready"
        break
    fi

    sleep 0.5
done

log_info "Starting frontend server on port 5173..."
(NODE_ENV=development pnpm exec vite dev 2>&1 | while IFS= read -r line; do echo -e "$(date '+%Y-%m-%d %H:%M:%S') | ${CYAN}frontend${NC} | $(echo "$line" | sed 's/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9] [AP]M //')"; done | tee logs/frontend.log) &
FRONTEND_PID=$!

log_info "Waiting for frontend server to be ready..."
while true; do
    if ! kill -0 "$FRONTEND_PID" 2>/dev/null; then
        log_error "Frontend server process died"
        if [ -f logs/frontend.log ]; then
            cat logs/frontend.log
        fi
        exit 1
    fi

    if curl -s http://localhost:5173 > /dev/null 2>&1; then
        log_success "Frontend server is ready"
        break
    fi

    sleep 0.5
done

log_success "Development servers are running!"
log_info "Frontend: http://localhost:5173"
log_info "Backend: http://localhost:3001"
log_info "Logs: logs/frontend.log and logs/backend.log"
log_info "Press Ctrl+C to stop all servers"

log_info "Servers are running. Press Ctrl+C to stop."
wait
